library(ggplot2)library(shiny)# Import cleaned loans data from Lending Cluballdata <- read.csv("C:/Users/michnelson/Desktop/Analytics Training/R Exercise/LendingClub2/data/loansData_clean2.csv", header = TRUE)alldata$Loan.Length.Clean <- factor(alldata$Loan.Length.Clean)alldata$Fico.Category <- factor(alldata$Fico.Category)alldata$Home.Ownership <- factor(alldata$Home.Ownership)# Create new variables: Amount Unfunded per Loan, Unfunded Loan (Dummy)Unfunded.Amount <- alldata$Amount.Requested - alldata$Amount.Funded.By.InvestorsUnfunded.Loan <- Unfunded.Amountfor (i in 1:length(Unfunded.Loan)){  if (Unfunded.Loan[i] > 0) {Unfunded.Loan[i] <- 1} else {Unfunded.Loan[i] <- 0}}# Create new data frame with relevant variablesloans <- data.frame(alldata$Loan.Length.Clean, alldata$Fico.Category, alldata$Home.Ownership, Unfunded.Amount, Unfunded.Loan, alldata$Interest.Rate.Clean, alldata$Monthly.Income)# Define UI for application that draws a bar chart and histogramui <- fluidPage(      # Navigation Bar  navbarPage("Lending Club Dashboard",                          # About Tab             tabPanel("About",                                            mainPanel(                        h1("So you wanted a dashboard with Pie Charts ey?"),                        h1 ("Well here!"),                        h1 ("Have a whole dashboard of Bar Charts and Histograms!")                      )),                          # Bar Chart Tab             tabPanel("Bar Chart",                                            # Sidebar with a select input for loan category and loan type                      sidebarLayout(                        sidebarPanel(                          selectInput("category",                                      "Select Loan Category to Explore",                                      # choices = list("Loan Length" == loans[,1],                                      #                "FICO Category" == loans[,2],                                      #                "Home Ownership" == loans[,3])                                      choices = colnames(loans[,1:3])),                                                    selectInput("type", "Select Loan Type",                                      choices = c("All", "Fully Funded", "Partially Funded"))),                                                                        # Show a plot of the generated distribution                        mainPanel(                          plotOutput("barchart"))                      ))             ,                          # Histogram Tab             tabPanel("Histogram",                                            # Sidebar with a select input for loan category and loan type                      sidebarLayout(                        sidebarPanel(                          selectInput("hist_var",                                      "Select A Variable to Explore",                                      choices = colnames(loans[,6:7])),                                                    selectInput("hist_type",                                      "Select Loan Type",                                      choices = c("All", "Fully Funded", "Partially Funded")),                                                    # Slider input to select number of bins in historgram                          sliderInput("bins",                                      "Number of bins:",                                      min = 1,                                      max = 50,                                      value = 30)                        ),                                                # Show a plot of the generated distribution                        mainPanel(                          plotOutput("hist")                        )                      )                                   )  ))# Define server logic required to draw the bar chart and histogramserver <- function(input, output) {      # Change bar chart counts based on loan type: all, fully funded, partially funded    counts <- reactive({    if(input$type == "All"){      counts <- table(loans[,input$category])      return(counts)    } else if (input$type == "Fully Funded"){      counts <- table(loans[loans$Unfunded.Loan == 0, input$category])      return(counts)    } else if (input$type == "Partially Funded"){      counts <- table(loans[loans$Unfunded.Loan == 1, input$category])      return(counts)    }      })    # Create barchart    output$barchart <- renderPlot({        barplot(counts(),            main = input$category,            ylab = "Number of Loans",            xlab = "Category")      })    # Change histogram counts based on loan type: all, fully funded, partially funded      output$hist <- renderPlot({            if(input$hist_type == "All"){      x <- loans          } else if (input$hist_type == "Fully Funded"){      x <- loans[loans$Unfunded.Loan == 0, ]          } else if (input$hist_type == "Partially Funded"){      x <- loans[loans$Unfunded.Loan == 1, ]          }      # Create ggplot histogram        ggplot(data= x, aes_string(input$hist_var)) +          geom_histogram(        breaks= seq(min(x[,input$hist_var]), max(x[,input$hist_var]), length.out = input$bins + 1),        col = "blue",        aes(fill = ..count..),        alpha = .4) +       labs(title = paste(input$hist_type," Loans by ", input$hist_var)) +      labs(x=input$hist_var, y= paste("Count of ", input$hist_type, "Loans"))  })}# Run the application shinyApp(ui = ui, server = server)
